#!/bin/bash

COLOR2="\033[1;38;5;213m"  # Bold magenta for ASCII, banner, and labels
RESET="\033[0m"
SCRIPT_DIR="$(dirname "$(realpath "$0")")"

# Inline ASCII logo (no placeholders, pure ASCII)
ascii_logo=(
"                     ooooos"
"                 os   o  o    s"
"            oo       s    s       ss"
"        oooo     o            o     ssss"
"       o    oo                    os    s"
"      oo  o                          s  ss"
"     o o o        oooooooooooo        s s s"
"       o s       ooooooooooooo        s s"
"    s  oo        oooooooooooooo        oo  s"
"   o   o         ooooos  oooooo         o   s"
"  o    o        soooo     soooo         o    s"
"     os         oooo       soooo         so"
" s              ooosss   sssoooo              o"
"     ss        oooo          ooos        so"
"  s    s       oooo          oooo       o    o"
"   s   s       ooo            ooo       o   o"
"    s  ss     oooo            ooos     oo  s"
"       s s  soooos            sooooo  s o"
"     s s s                            o o o"
"      ss  s                          o  oo"
"       s    ss                    oo    o"
"        #sss     s            o     oooo"
"            ss       s    s       oo"
"                 ss   s  o    o"
"                     ssssss"
)

# AxOS banner lines
banner_lines=(
"░█████╗░██╗░░██╗░█████╗░░██████╗"
"██╔══██╗╚██╗██╔╝██╔══██╗██╔════╝"
"███████║░╚███╔╝░██║░░██║╚█████╗░"
"██╔══██║░██╔██╗░██║░░██║░╚═══██╗"
"██║░░██║██╔╝╚██╗╚█████╔╝██████╔╝"
"╚═╝░░╚═╝╚═╝░░╚═╝░╚════╝░╚═════╝░"
)

# Print logo + banner side-by-side, both in $COLOR2 (bold magenta)
echo
for i in "${!ascii_logo[@]}"; do
    logo="${ascii_logo[i]}"
    printf "${COLOR2}%-50s  %-40s${RESET}\n" "$logo" "${banner_lines[i]:-}"
done
echo

# ───── System Info Box ─────
OS="AxOS (Arch-based)"
KERNEL="$(uname -r)"
UPTIME="$(uptime -p)"
SHELL="$SHELL"
WM="${XDG_CURRENT_DESKTOP:-$DESKTOP_SESSION}"
TERM="$TERM"
CPU="$(grep -m1 'model name' /proc/cpuinfo | cut -d ':' -f2 | xargs | cut -c1-22)"
RAM="$(free -h | awk '/Mem:/ {print $3 "/" $2}')"
PKGS="$(pacman -Q | wc -l)"
STORAGE="$(df -h / | awk 'NR==2 {print $3 "/" $2}')"

# Function to truncate strings longer than max length
truncate() {
  local str="$1"
  local maxlen=$2
  if [ ${#str} -gt $maxlen ]; then
    echo "${str:0:maxlen-3}..."
  else
    echo "$str"
  fi
}

# Box width 76 chars
echo -e "${COLOR2}╭──────────────────────────────────────────────────────────────╮${RESET}"

printf "${COLOR2}│${RESET} ${COLOR2}%-8s${RESET} %-18s   ${COLOR2}%-8s${RESET} %-30s${COLOR2}│\n" \
  "OS:" "$(truncate "$OS" 18)" "Kernel:" "$(truncate "$KERNEL" 30)"

printf "${COLOR2}│${RESET} ${COLOR2}%-8s${RESET} %-18s   ${COLOR2}%-8s${RESET} %-30s${COLOR2}│\n" \
  "Uptime:" "$(truncate "$UPTIME" 18)" "Shell:" "$(truncate "$SHELL" 30)"

printf "${COLOR2}│${RESET} ${COLOR2}%-8s${RESET} %-18s   ${COLOR2}%-8s${RESET} %-30s${COLOR2}│\n" \
  "WM/DE:" "$(truncate "$WM" 18)" "Terminal:" "$(truncate "$TERM" 30)"

printf "${COLOR2}│${RESET} ${COLOR2}%-8s${RESET} %-18s   ${COLOR2}%-8s${RESET} %-30s${COLOR2}│\n" \
  "CPU:" "$(truncate "$CPU" 18)" "RAM:" "$(truncate "$RAM" 30)"

printf "${COLOR2}│${RESET} ${COLOR2}%-8s${RESET} %-18s   ${COLOR2}%-8s${RESET} %-30s${COLOR2}│\n" \
  "Packages:" "$(truncate "$PKGS" 18)" "Storage:" "$(truncate "$STORAGE" 30)"

echo -e "${COLOR2}╰──────────────────────────────────────────────────────────────╯${RESET}"
